name: CML predict

on:
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  homework1:
    runs-on: ubuntu-20.04
    if: ${{ github.ref == 'refs/heads/homework1' }}
    defaults:
      run:
        working-directory: ./ml_project

    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Setup CML
        uses: iterative/setup-cml@v1

      - name: Cache pip dependecies
        uses: actions/cache@v2
        id: pip-cache
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          pip install wheel~=0.36
          pip install -r requirements.dev.txt
      - name: Test with pytest
        run: |
          python -m pytest ./tests

      - name: Lint with pylint
        run: |
          pylint --exit-zero heat_diss
          pylint --exit-zero config.py generate_report.py predict.py train_test_split.py train.py utils.py
      - name: Train log reg
        run: |
          dvc repro log-reg-predict

          # Report metrics
          echo "## Матрица ошибок" >> report.md

          # Publish confusion matrix 
          dvc repro log-reg-plot-conf-matrix
          dvc repro svc-plot-conf-matrix
          cml-publish ./data/train/log_reg/conf_matrix.png --md >> report.md
           cml-publish ./data/train/svc/conf_matrix.png --md >> report.md
      - name: Send report
        env:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
        run: cml-send-comment ./report.md 

  homework2:
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: ./online_inference
    
    env:
      MODEL_PATH: ./models/svc/svc.pickle
      HOME_DIR: ./online_inference
    
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Cache pip dependecies
        uses: actions/cache@v2
        id: pip-cache
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          pip install wheel~=0.36
          pip install -r requirements.dev.txt
      - name: Test with pytest
        run: |
          python -m pytest ./tests

      - name: Lint with pylint
        run: |
          pylint --exit-zero heart_diss_app
          pylint --exit-zero requester.py

      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          builder: ${{ steps.buildx.outputs.name }}
          context: ${{ env.HOME_DIR }}
          file: ${{ env.HOME_DIR }}/Dockerfile
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          tags: ${{ secrets.DOCKERHUB_USER }}/hear-diss-app:latest

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
